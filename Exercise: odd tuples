"""
Write a procedure called oddTuples, which takes a tuple as input, and returns a new tuple as output, where every other element of the input tuple is copied, starting with the first one. So if test is the tuple ('I', 'am', 'a', 'test', 'tuple'), then evaluating oddTuples on this input would return the tuple ('I', 'a', 'tuple').
"""
def oddTuples(aTup):
    c = 0
    newTuple = ()
    for index in aTup:
        if i%2 == 0:
            newTup += (index,)
        c += 1
    return newTuple
    
元组 tuple 来源 网络 2014年
一、创建元组
复制代码 代码如下:
tup1 = ('physics', 'chemistry', 1997, 2000);
tup2 = (1, 2, 3, 4, 5 );
tup3 = "a", "b", "c", "d";

创建空元组
复制代码 代码如下:
tup1 = ();

元组中只包含一个元素时，需要在元素后面添加逗号来消除歧义
复制代码 代码如下:
tup1 = (50,);

元组与字符串类似，下标索引从0开始，可以进行截取，组合等。
二、访问元组
元组可以使用下标索引来访问元组中的值，如下实例:
复制代码 代码如下:
#!/usr/bin/python
tup1 = ('physics', 'chemistry', 1997, 2000);
tup2 = (1, 2, 3, 4, 5, 6, 7 );
print "tup1[0]: ", tup1[0]
print "tup2[1:5]: ", tup2[1:5]
#以上实例输出结果：
#tup1[0]:  physics
#tup2[1:5]:  [2, 3, 4, 5]      #PS:我认为应该是小括号

三、修改元组
元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:
复制代码 代码如下:
#!/usr/bin/python
tup1 = (12, 34.56);
tup2 = ('abc', 'xyz');
# 以下修改元组元素操作是非法的。
# tup1[0] = 100;
# 创建一个新的元组
tup3 = tup1 + tup2;
print tup3;
#以上实例输出结果：
#(12, 34.56, 'abc', 'xyz')

四、删除元组
元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:
复制代码 代码如下:
#!/usr/bin/python
tup = ('physics', 'chemistry', 1997, 2000);
print tup;
del tup;
print "After deleting tup : "
print tup;

#以上实例元组被删除后，输出变量会有异常信息，输出如下所示：
#('physics', 'chemistry', 1997, 2000)
#After deleting tup :
#Traceback (most recent call last):
#  File "test.py", line 9, in <module>
#    print tup;
#NameError: name 'tup' is not defined[/code]

五、元组运算符
与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。

注意：
tup1=('physics', 'chemicals',1997,2000);
tup2=(1,2,3,4,5);
tup3="a","b","c","d";
tup4=(6,7,8,9,10);
tupa=tup2+tup4
tupb=tup2*3
print(tupb)

运算出来是：(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)  
总结： tuple 可以乘以一个int 然后答案并 不是 每个element乘以int 而是整个t元祖重复int次

六、元组索引，截取
因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示：
元组：
复制代码 代码如下:
L = ('spam', 'Spam', 'SPAM!')

七、无关闭分隔符
任意无符号的对象，以逗号隔开，默认为元组，如下实例：
复制代码 代码如下:
#!/usr/bin/python
print 'abc', -4.24e93, 18+6.6j, 'xyz';
x, y = 1, 2;
print "Value of x , y : ", x,y;

以上实例允许结果：
复制代码 代码如下:
abc -4.24e+93 (18+6.6j) xyz
Value of x , y : 1 2

八、元组内置函数
Python元组包含了以下内置函数
1、cmp(tuple1, tuple2)：比较两个元组元素。 python3.5版本 没有这个
2、len(tuple)：计算元组元素个数。
3、max(tuple)：返回元组中元素最大值。
4、min(tuple)：返回元组中元素最小值。
5、tuple(seq)：将列表转换为元组。

九、另一种解读
tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：
复制代码 代码如下:
>>> classmates = ('Michael', 'Bob', 'Tracy')
现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。
不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。
tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如：
复制代码 代码如下:
>>> t = (1, 2)
>>> t
(1, 2)

如果要定义一个空的tuple，可以写成()：
复制代码 代码如下:
>>> t = ()
>>> t
()

但是，要定义一个只有1个元素的tuple，如果你这么定义：
复制代码 代码如下:
>>> t = (1)
>>> t
1

定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。
所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：
复制代码 代码如下:
>>> t = (1,)
>>> t
(1,)

Python在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义上的括号。
在来看一个“可变的”tuple：
复制代码 代码如下:
>>> t = ('a', 'b', ['A', 'B'])
>>> t[2][0] = 'X'
>>> t[2][1] = 'Y'
>>> t
('a', 'b', ['X', 'Y'])

这个tuple定义的时候有3个元素，分别是'a'，'b'和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？
别急，我们先看看定义的时候tuple包含的3个元素：
tuple-0
当我们把list的元素'A'和'B'修改为'X'和'Y'后，tuple变为：
tuple-1
表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！
理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。
