"""
Mutation, Aliasing, Cloning
"""
List are mutable.
#alias
"""
warm=['red','orange','yellow']
hot=warm
hot.extend('pink')
warm
Out[56]: ['red', 'orange', 'yellow', 'p', 'i', 'n', 'k']
"""
"""
warm=['red','orange','yellow']
hot=warm
hot.append('pink')
hot
Out[60]: ['red', 'orange', 'yellow', 'pink']
warm
Out[61]: ['red', 'orange', 'yellow', 'pink']
"""
cool =['blue','green','grey']
chill =['blue','green','grey']
print(cool)
['blue', 'green', 'grey']
print(chill)
['blue', 'green', 'grey']

chill[2]='blue'
print(chill)
['blue', 'green', 'blue']
print(cool)
['blue', 'green', 'grey']

"""
cloning a list
"""
cool =['blue','green','grey']
chill = cool[:]

print(chill)
['blue', 'green', 'grey']

chill.append('black')

print(chill)
['blue', 'green', 'grey', 'black']
print(cool)
['blue', 'green', 'grey']
"""
sort(),sorted()
"""
calling sort() mutates the list,returns nothing
calling sorted() does not mutate list, must assign result to variable

"""
mutation and iteration
"""
#avoid mutating a list as u r iterating over it
#Wrong code:
"""
L1 and L2 r two lists. if one element which in L1 is also in L2, remove it from L1
"""
def remove_dups(L1,L2):   
    for e in L1:         # check every elements which in list1
        if e in L2:      # if element in list2
           L1.remove(e)  # remove this element from list1
L1=[1,2,3,4]             # this function didn't remove 2 from L1,because when element 1(L[0]) is removed. L1 became [2,3,4]. for loop goona check L[1], it will be 3 not 2! 
L2=[1,2,5,6]
remove_dups(L1,L2)
L1
[2,3,4]

#Right code
def remove_dups_new(L1,L2):
    L1_copy = L1[:]
    for e in L1_copy:
       if e in L2:
          L1.remove(e)
          
